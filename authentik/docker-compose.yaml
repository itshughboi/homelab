---
services:
  postgresql:
    image: docker.io/library/postgres:16.4
    logging:
      driver: loki
      options:
        loki-url: "https://loki.hughboi.cc/loki/api/v1/push"
        loki-retries: 2
        loki-max-backoff: 800ms
        loki-timeout: 1s
        keep-file: "true"
        mode: "non-blocking"
    container_name: authentik-postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=America/Denver
    env_file:
      - .env
    networks:
      - proxy


  redis:
    image: docker.io/library/redis:7.4.1
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - proxy


  server:
    image: ghcr.io/goauthentik/server:2024.10.4
    container_name: authentik-server
    restart: unless-stopped
    command: server
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=postgresql
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER} # Fixed variable name
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB} # Fixed variable name
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD} # Fixed variable name
      - AUTHENTIK_ERROR_REPORTING_ENABLED=true # Enables reporting
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
    volumes:
      - authentik-media:/media
      - authentik-custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.entrypoints=http"
      - "traefik.http.routers.authentik.rule=Host(`authentik.hughboi.cc`)"
      - "traefik.http.middlewares.authentik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.authentik.middlewares=authentik-https-redirect"
      - "traefik.http.routers.authentik-secure.entrypoints=https"
      - "traefik.http.routers.authentik-secure.rule=Host(`authentik.hughboi.cc`)"
      - "traefik.http.routers.authentik-secure.tls=true"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.docker.network=proxy"


  worker:
    image: ghcr.io/goauthentik/server:2024.8.3
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=postgresql
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER} # Fixed variable name
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB} # Fixed variable name
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD} # Fixed variable name
      - AUTHENTIK_ERROR_REPORTING_ENABLED=true # Enables reporting
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - authentikmedia:/media
      - certs:/certs
      - authentik-custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
    networks:
      - proxy

volumes:
  database:
    driver: local
  redis:
    driver: local
  authentik-custom-templates:
  authentik-media:
  certs:
  

networks:
  proxy:
    external: true
